import java.nio.file.Files
import java.nio.file.Paths

apply plugin: 'application'

mainClassName = 'com.bbn.marti.UserManager'

apply plugin: 'com.github.johnrengelman.shadow'

jar {
    enabled = false
}

compileJava.dependsOn(':takserver-takcl-core:compileCursedtakJava')

shadowJar {
    dependsOn compileJava
    baseName = 'UserManager'
    classifier = 'all'
    setZip64(true)
    version = version
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    integrationTest {
        java {
            srcDir 'src/integrationTest/java'
        }
        resources {
            srcDir 'src/integrationTest/resources'
        }
    }
}

task integrationTest(type: Test) {
    group = "Verification"
    description = "Executes integration test using the takcl framework"
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    def tmpDir = "$buildDir/tmp/integrationTest/"
    def fallbackTmpDir = tmpDir
    def modelServerDir = project.parent.project(':takserver-package').buildDir.toPath().resolve('takArtifacts')
    def certToolDir = project.parent.project(':takserver-package').buildDir.toPath().resolve('takArtifacts/certs')
    def jarName = 'takserver.war'
    def configFilepath = Paths.get(tmpDir).resolve("TAKCLConfig.xml").toAbsolutePath()

    def certificateDirectory = tmpDir + 'TEST_CERTS/'

    def configurationString =
            """<?xml version="1.0" encoding="UTF-8"?>
<TAKCLConfiguration xmlns="http://bbn.com/marti/takcl/config"
  xmlns:common="http://bbn.com/marti/takcl/config/common">
  <common:TemporaryDirectory>"${tmpDir}</common:TemporaryDirectory>"
  <common:FallbackTemporaryDirectory>${fallbackTmpDir}/</common:FallbackTemporaryDirectory>
  <common:RunnableTAKServerConfig
    modelServerDir="${modelServerDir}"
    jarName="${jarName}"
    serverFarmDir="${tmpDir}TEST_FARM"
    certificateDirectory="${certificateDirectory}"
    certToolDirectory="${certToolDir}"
    />
  <common:ConnectableTAKServerConfig
    url="127.0.0.1"
    truststoreJKSFilepath="${certificateDirectory}/truststore-root.jks"
    truststorePass="atakatak"
    clientKeystoreP12Filepath="${certificateDirectory}TAKCL.p12"
    clientKeystorePass="atakatak"
    />
  <common:TAKCLTestSourceGenerationConfig
    javaSrcDir="src/"
    javaTemplatePackage="com.bbn.marti.test.shared.data.templates"
    javaGenerationPackage="com.bbn.marti.test.shared.data.generated"
    />
</TAKCLConfiguration>"""

    doFirst {
        new File(tmpDir).mkdirs()
        Files.write(configFilepath, configurationString.getBytes())
    }

    systemProperty 'com.bbn.marti.takcl.config.filepath', configFilepath.toString()
    systemProperty 'java.net.preferIPv4Stack', 'true'
    systemProperty 'logging.level.com.bbn', 'TRACE'
    systemProperty 'logging.level.tak', 'TRACE'
    systemProperty 'logging.level.org.apache.ignite', 'INFO'
    systemProperty 'com.bbn.marti.takcl.dbEnabled', 'false'

    Object testProperties = System.properties
    for (String key : testProperties.keySet()) {
        if (key.startsWith("com.bbn.marti.takcl")) {
            systemProperty key, testProperties.get(key)
        }
    }

    dependsOn('build')
    dependsOn(':takserver-package:prePackage')
}

dependencies {
    implementation(project(':takserver-takcl-core')) {
        exclude group: 'io.kubernetes', module: 'client-java'
        exclude group: 'org.springframework', module: 'spring-context'
        exclude group: 'org.springframework.security', module: 'spring-security-core'
        exclude group: 'org.springframework', module: 'spring-context'
        exclude group: 'org.springframework', module: 'spring-beans'
        exclude group: 'org.springframework', module: 'spring-context'
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-data-mongodb'
        exclude group: 'org.hibernate.orm', module: 'hibernate-core'
        exclude group: 'org.hibernate.orm', module: 'hibernate-entitymanager'
        exclude group: 'org.apache.ignite', module: 'ignite-indexing'
        exclude group: 'org.hibernate.orm', module: 'hibernate-core'
        exclude group: 'org.apache.ignite', module: 'ignite-indexing'
        exclude group: 'org.antlr', module: 'antlr4'
    }
    implementation(project(':takserver-common')) {
        exclude group: 'org.hibernate.orm', module: 'hibernate-core'
        exclude group: 'org.apache.ignite', module: 'ignite-indexing'
        exclude group: 'org.antlr', module: 'antlr4'
    }

    implementation group: 'ch.qos.logback', name: 'logback-classic', version: logback_version
    implementation group: 'org.slf4j', name: 'slf4j-api', version: slf4j_version
    implementation group: 'org.apache.ignite', name: 'ignite-slf4j', version: ignite_version
    implementation group: 'xerces', name: 'xercesImpl', version: xerces_version

    // required to fix version conflict for h2 between ignite and spring boot
    implementation group: 'com.h2database', name: 'h2', version: h2_version

    integrationTestImplementation project(':takserver-takcl-core')
    integrationTestImplementation project(':takserver-common')
    integrationTestImplementation group: 'commons-io', name: 'commons-io', version: commons_io_version
    integrationTestImplementation group: 'org.springframework.security', name: 'spring-security-core', version: spring_security_version
    integrationTestImplementation group: 'junit', name: 'junit', version: junit_version
    integrationTestImplementation group: 'xerces', name: 'xercesImpl', version: xerces_version

    // required to fix version conflict for h2 between ignite and spring boot
    integrationTestImplementation group: 'com.h2database', name: 'h2', version: h2_version
}

task copyJar(type: Copy, dependsOn: shadowJar) {
    from file('build/libs')
    include 'UserManager-' + version + '-all.jar'
    into "$buildDir/cluster"
    rename('UserManager-' + version + '-all.jar', 'UserManager.jar')
}

task setupCluster(type: Copy, dependsOn: copyJar) {}

clean {
    doFirst {
        delete '$buildDir/cluster'
    }
}

project.tasks.named("processIntegrationTestResources") {
    // This duplication strategy de-conflicts user000.pem conflict for processIntegrationTestResources task
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
