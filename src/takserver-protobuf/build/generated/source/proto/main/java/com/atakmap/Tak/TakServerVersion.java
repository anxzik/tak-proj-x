// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fig.proto

package com.atakmap.Tak;

/**
 * Protobuf type {@code com.atakmap.TakServerVersion}
 */
public  final class TakServerVersion extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:com.atakmap.TakServerVersion)
    TakServerVersionOrBuilder {
  // Use TakServerVersion.newBuilder() to construct.
  private TakServerVersion(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private TakServerVersion() {
    major_ = 0L;
    minor_ = 0L;
    patch_ = 0L;
    branch_ = "";
    variant_ = "";
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private TakServerVersion(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 8: {

            major_ = input.readInt64();
            break;
          }
          case 16: {

            minor_ = input.readInt64();
            break;
          }
          case 24: {

            patch_ = input.readInt64();
            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();

            branch_ = s;
            break;
          }
          case 42: {
            java.lang.String s = input.readStringRequireUtf8();

            variant_ = s;
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.atakmap.Tak.FigProto.internal_static_com_atakmap_TakServerVersion_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.atakmap.Tak.FigProto.internal_static_com_atakmap_TakServerVersion_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.atakmap.Tak.TakServerVersion.class, com.atakmap.Tak.TakServerVersion.Builder.class);
  }

  public static final int MAJOR_FIELD_NUMBER = 1;
  private long major_;
  /**
   * <pre>
   * major version number
   * </pre>
   *
   * <code>optional int64 major = 1;</code>
   */
  public long getMajor() {
    return major_;
  }

  public static final int MINOR_FIELD_NUMBER = 2;
  private long minor_;
  /**
   * <pre>
   * minor version number
   * </pre>
   *
   * <code>optional int64 minor = 2;</code>
   */
  public long getMinor() {
    return minor_;
  }

  public static final int PATCH_FIELD_NUMBER = 3;
  private long patch_;
  /**
   * <pre>
   * patch version number
   * </pre>
   *
   * <code>optional int64 patch = 3;</code>
   */
  public long getPatch() {
    return patch_;
  }

  public static final int BRANCH_FIELD_NUMBER = 4;
  private volatile java.lang.Object branch_;
  /**
   * <pre>
   * branch name
   * </pre>
   *
   * <code>optional string branch = 4;</code>
   */
  public java.lang.String getBranch() {
    java.lang.Object ref = branch_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      branch_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * branch name
   * </pre>
   *
   * <code>optional string branch = 4;</code>
   */
  public com.google.protobuf.ByteString
      getBranchBytes() {
    java.lang.Object ref = branch_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      branch_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int VARIANT_FIELD_NUMBER = 5;
  private volatile java.lang.Object variant_;
  /**
   * <pre>
   * variant name
   * </pre>
   *
   * <code>optional string variant = 5;</code>
   */
  public java.lang.String getVariant() {
    java.lang.Object ref = variant_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      variant_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * variant name
   * </pre>
   *
   * <code>optional string variant = 5;</code>
   */
  public com.google.protobuf.ByteString
      getVariantBytes() {
    java.lang.Object ref = variant_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      variant_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (major_ != 0L) {
      output.writeInt64(1, major_);
    }
    if (minor_ != 0L) {
      output.writeInt64(2, minor_);
    }
    if (patch_ != 0L) {
      output.writeInt64(3, patch_);
    }
    if (!getBranchBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, branch_);
    }
    if (!getVariantBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, variant_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (major_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(1, major_);
    }
    if (minor_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(2, minor_);
    }
    if (patch_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(3, patch_);
    }
    if (!getBranchBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, branch_);
    }
    if (!getVariantBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, variant_);
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.atakmap.Tak.TakServerVersion)) {
      return super.equals(obj);
    }
    com.atakmap.Tak.TakServerVersion other = (com.atakmap.Tak.TakServerVersion) obj;

    boolean result = true;
    result = result && (getMajor()
        == other.getMajor());
    result = result && (getMinor()
        == other.getMinor());
    result = result && (getPatch()
        == other.getPatch());
    result = result && getBranch()
        .equals(other.getBranch());
    result = result && getVariant()
        .equals(other.getVariant());
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptorForType().hashCode();
    hash = (37 * hash) + MAJOR_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getMajor());
    hash = (37 * hash) + MINOR_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getMinor());
    hash = (37 * hash) + PATCH_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getPatch());
    hash = (37 * hash) + BRANCH_FIELD_NUMBER;
    hash = (53 * hash) + getBranch().hashCode();
    hash = (37 * hash) + VARIANT_FIELD_NUMBER;
    hash = (53 * hash) + getVariant().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.atakmap.Tak.TakServerVersion parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.atakmap.Tak.TakServerVersion parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.atakmap.Tak.TakServerVersion parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.atakmap.Tak.TakServerVersion parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.atakmap.Tak.TakServerVersion parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.atakmap.Tak.TakServerVersion parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.atakmap.Tak.TakServerVersion parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.atakmap.Tak.TakServerVersion parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.atakmap.Tak.TakServerVersion parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.atakmap.Tak.TakServerVersion parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.atakmap.Tak.TakServerVersion prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code com.atakmap.TakServerVersion}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:com.atakmap.TakServerVersion)
      com.atakmap.Tak.TakServerVersionOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.atakmap.Tak.FigProto.internal_static_com_atakmap_TakServerVersion_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.atakmap.Tak.FigProto.internal_static_com_atakmap_TakServerVersion_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.atakmap.Tak.TakServerVersion.class, com.atakmap.Tak.TakServerVersion.Builder.class);
    }

    // Construct using com.atakmap.Tak.TakServerVersion.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      major_ = 0L;

      minor_ = 0L;

      patch_ = 0L;

      branch_ = "";

      variant_ = "";

      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.atakmap.Tak.FigProto.internal_static_com_atakmap_TakServerVersion_descriptor;
    }

    public com.atakmap.Tak.TakServerVersion getDefaultInstanceForType() {
      return com.atakmap.Tak.TakServerVersion.getDefaultInstance();
    }

    public com.atakmap.Tak.TakServerVersion build() {
      com.atakmap.Tak.TakServerVersion result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.atakmap.Tak.TakServerVersion buildPartial() {
      com.atakmap.Tak.TakServerVersion result = new com.atakmap.Tak.TakServerVersion(this);
      result.major_ = major_;
      result.minor_ = minor_;
      result.patch_ = patch_;
      result.branch_ = branch_;
      result.variant_ = variant_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.atakmap.Tak.TakServerVersion) {
        return mergeFrom((com.atakmap.Tak.TakServerVersion)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.atakmap.Tak.TakServerVersion other) {
      if (other == com.atakmap.Tak.TakServerVersion.getDefaultInstance()) return this;
      if (other.getMajor() != 0L) {
        setMajor(other.getMajor());
      }
      if (other.getMinor() != 0L) {
        setMinor(other.getMinor());
      }
      if (other.getPatch() != 0L) {
        setPatch(other.getPatch());
      }
      if (!other.getBranch().isEmpty()) {
        branch_ = other.branch_;
        onChanged();
      }
      if (!other.getVariant().isEmpty()) {
        variant_ = other.variant_;
        onChanged();
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.atakmap.Tak.TakServerVersion parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.atakmap.Tak.TakServerVersion) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private long major_ ;
    /**
     * <pre>
     * major version number
     * </pre>
     *
     * <code>optional int64 major = 1;</code>
     */
    public long getMajor() {
      return major_;
    }
    /**
     * <pre>
     * major version number
     * </pre>
     *
     * <code>optional int64 major = 1;</code>
     */
    public Builder setMajor(long value) {
      
      major_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * major version number
     * </pre>
     *
     * <code>optional int64 major = 1;</code>
     */
    public Builder clearMajor() {
      
      major_ = 0L;
      onChanged();
      return this;
    }

    private long minor_ ;
    /**
     * <pre>
     * minor version number
     * </pre>
     *
     * <code>optional int64 minor = 2;</code>
     */
    public long getMinor() {
      return minor_;
    }
    /**
     * <pre>
     * minor version number
     * </pre>
     *
     * <code>optional int64 minor = 2;</code>
     */
    public Builder setMinor(long value) {
      
      minor_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * minor version number
     * </pre>
     *
     * <code>optional int64 minor = 2;</code>
     */
    public Builder clearMinor() {
      
      minor_ = 0L;
      onChanged();
      return this;
    }

    private long patch_ ;
    /**
     * <pre>
     * patch version number
     * </pre>
     *
     * <code>optional int64 patch = 3;</code>
     */
    public long getPatch() {
      return patch_;
    }
    /**
     * <pre>
     * patch version number
     * </pre>
     *
     * <code>optional int64 patch = 3;</code>
     */
    public Builder setPatch(long value) {
      
      patch_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * patch version number
     * </pre>
     *
     * <code>optional int64 patch = 3;</code>
     */
    public Builder clearPatch() {
      
      patch_ = 0L;
      onChanged();
      return this;
    }

    private java.lang.Object branch_ = "";
    /**
     * <pre>
     * branch name
     * </pre>
     *
     * <code>optional string branch = 4;</code>
     */
    public java.lang.String getBranch() {
      java.lang.Object ref = branch_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        branch_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * branch name
     * </pre>
     *
     * <code>optional string branch = 4;</code>
     */
    public com.google.protobuf.ByteString
        getBranchBytes() {
      java.lang.Object ref = branch_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        branch_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * branch name
     * </pre>
     *
     * <code>optional string branch = 4;</code>
     */
    public Builder setBranch(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      branch_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * branch name
     * </pre>
     *
     * <code>optional string branch = 4;</code>
     */
    public Builder clearBranch() {
      
      branch_ = getDefaultInstance().getBranch();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * branch name
     * </pre>
     *
     * <code>optional string branch = 4;</code>
     */
    public Builder setBranchBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      branch_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object variant_ = "";
    /**
     * <pre>
     * variant name
     * </pre>
     *
     * <code>optional string variant = 5;</code>
     */
    public java.lang.String getVariant() {
      java.lang.Object ref = variant_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        variant_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * variant name
     * </pre>
     *
     * <code>optional string variant = 5;</code>
     */
    public com.google.protobuf.ByteString
        getVariantBytes() {
      java.lang.Object ref = variant_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        variant_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * variant name
     * </pre>
     *
     * <code>optional string variant = 5;</code>
     */
    public Builder setVariant(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      variant_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * variant name
     * </pre>
     *
     * <code>optional string variant = 5;</code>
     */
    public Builder clearVariant() {
      
      variant_ = getDefaultInstance().getVariant();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * variant name
     * </pre>
     *
     * <code>optional string variant = 5;</code>
     */
    public Builder setVariantBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      variant_ = value;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:com.atakmap.TakServerVersion)
  }

  // @@protoc_insertion_point(class_scope:com.atakmap.TakServerVersion)
  private static final com.atakmap.Tak.TakServerVersion DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.atakmap.Tak.TakServerVersion();
  }

  public static com.atakmap.Tak.TakServerVersion getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<TakServerVersion>
      PARSER = new com.google.protobuf.AbstractParser<TakServerVersion>() {
    public TakServerVersion parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new TakServerVersion(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<TakServerVersion> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<TakServerVersion> getParserForType() {
    return PARSER;
  }

  public com.atakmap.Tak.TakServerVersion getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

