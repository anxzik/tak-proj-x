// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fig.proto

package com.atakmap.Tak;

/**
 * Protobuf type {@code com.atakmap.Subscription}
 */
public  final class Subscription extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:com.atakmap.Subscription)
    SubscriptionOrBuilder {
  // Use Subscription.newBuilder() to construct.
  private Subscription(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Subscription() {
    filter_ = "";
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private Subscription(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            com.atakmap.Tak.Identity.Builder subBuilder = null;
            if (identity_ != null) {
              subBuilder = identity_.toBuilder();
            }
            identity_ = input.readMessage(com.atakmap.Tak.Identity.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(identity_);
              identity_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();

            filter_ = s;
            break;
          }
          case 26: {
            com.atakmap.Tak.TakServerVersion.Builder subBuilder = null;
            if (version_ != null) {
              subBuilder = version_.toBuilder();
            }
            version_ = input.readMessage(com.atakmap.Tak.TakServerVersion.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(version_);
              version_ = subBuilder.buildPartial();
            }

            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.atakmap.Tak.FigProto.internal_static_com_atakmap_Subscription_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.atakmap.Tak.FigProto.internal_static_com_atakmap_Subscription_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.atakmap.Tak.Subscription.class, com.atakmap.Tak.Subscription.Builder.class);
  }

  public static final int IDENTITY_FIELD_NUMBER = 1;
  private com.atakmap.Tak.Identity identity_;
  /**
   * <code>optional .com.atakmap.Identity identity = 1;</code>
   */
  public boolean hasIdentity() {
    return identity_ != null;
  }
  /**
   * <code>optional .com.atakmap.Identity identity = 1;</code>
   */
  public com.atakmap.Tak.Identity getIdentity() {
    return identity_ == null ? com.atakmap.Tak.Identity.getDefaultInstance() : identity_;
  }
  /**
   * <code>optional .com.atakmap.Identity identity = 1;</code>
   */
  public com.atakmap.Tak.IdentityOrBuilder getIdentityOrBuilder() {
    return getIdentity();
  }

  public static final int FILTER_FIELD_NUMBER = 2;
  private volatile java.lang.Object filter_;
  /**
   * <code>optional string filter = 2;</code>
   */
  public java.lang.String getFilter() {
    java.lang.Object ref = filter_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      filter_ = s;
      return s;
    }
  }
  /**
   * <code>optional string filter = 2;</code>
   */
  public com.google.protobuf.ByteString
      getFilterBytes() {
    java.lang.Object ref = filter_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      filter_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int VERSION_FIELD_NUMBER = 3;
  private com.atakmap.Tak.TakServerVersion version_;
  /**
   * <code>optional .com.atakmap.TakServerVersion version = 3;</code>
   */
  public boolean hasVersion() {
    return version_ != null;
  }
  /**
   * <code>optional .com.atakmap.TakServerVersion version = 3;</code>
   */
  public com.atakmap.Tak.TakServerVersion getVersion() {
    return version_ == null ? com.atakmap.Tak.TakServerVersion.getDefaultInstance() : version_;
  }
  /**
   * <code>optional .com.atakmap.TakServerVersion version = 3;</code>
   */
  public com.atakmap.Tak.TakServerVersionOrBuilder getVersionOrBuilder() {
    return getVersion();
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (identity_ != null) {
      output.writeMessage(1, getIdentity());
    }
    if (!getFilterBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, filter_);
    }
    if (version_ != null) {
      output.writeMessage(3, getVersion());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (identity_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getIdentity());
    }
    if (!getFilterBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, filter_);
    }
    if (version_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getVersion());
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.atakmap.Tak.Subscription)) {
      return super.equals(obj);
    }
    com.atakmap.Tak.Subscription other = (com.atakmap.Tak.Subscription) obj;

    boolean result = true;
    result = result && (hasIdentity() == other.hasIdentity());
    if (hasIdentity()) {
      result = result && getIdentity()
          .equals(other.getIdentity());
    }
    result = result && getFilter()
        .equals(other.getFilter());
    result = result && (hasVersion() == other.hasVersion());
    if (hasVersion()) {
      result = result && getVersion()
          .equals(other.getVersion());
    }
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptorForType().hashCode();
    if (hasIdentity()) {
      hash = (37 * hash) + IDENTITY_FIELD_NUMBER;
      hash = (53 * hash) + getIdentity().hashCode();
    }
    hash = (37 * hash) + FILTER_FIELD_NUMBER;
    hash = (53 * hash) + getFilter().hashCode();
    if (hasVersion()) {
      hash = (37 * hash) + VERSION_FIELD_NUMBER;
      hash = (53 * hash) + getVersion().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.atakmap.Tak.Subscription parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.atakmap.Tak.Subscription parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.atakmap.Tak.Subscription parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.atakmap.Tak.Subscription parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.atakmap.Tak.Subscription parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.atakmap.Tak.Subscription parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.atakmap.Tak.Subscription parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.atakmap.Tak.Subscription parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.atakmap.Tak.Subscription parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.atakmap.Tak.Subscription parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.atakmap.Tak.Subscription prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code com.atakmap.Subscription}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:com.atakmap.Subscription)
      com.atakmap.Tak.SubscriptionOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.atakmap.Tak.FigProto.internal_static_com_atakmap_Subscription_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.atakmap.Tak.FigProto.internal_static_com_atakmap_Subscription_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.atakmap.Tak.Subscription.class, com.atakmap.Tak.Subscription.Builder.class);
    }

    // Construct using com.atakmap.Tak.Subscription.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      if (identityBuilder_ == null) {
        identity_ = null;
      } else {
        identity_ = null;
        identityBuilder_ = null;
      }
      filter_ = "";

      if (versionBuilder_ == null) {
        version_ = null;
      } else {
        version_ = null;
        versionBuilder_ = null;
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.atakmap.Tak.FigProto.internal_static_com_atakmap_Subscription_descriptor;
    }

    public com.atakmap.Tak.Subscription getDefaultInstanceForType() {
      return com.atakmap.Tak.Subscription.getDefaultInstance();
    }

    public com.atakmap.Tak.Subscription build() {
      com.atakmap.Tak.Subscription result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.atakmap.Tak.Subscription buildPartial() {
      com.atakmap.Tak.Subscription result = new com.atakmap.Tak.Subscription(this);
      if (identityBuilder_ == null) {
        result.identity_ = identity_;
      } else {
        result.identity_ = identityBuilder_.build();
      }
      result.filter_ = filter_;
      if (versionBuilder_ == null) {
        result.version_ = version_;
      } else {
        result.version_ = versionBuilder_.build();
      }
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.atakmap.Tak.Subscription) {
        return mergeFrom((com.atakmap.Tak.Subscription)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.atakmap.Tak.Subscription other) {
      if (other == com.atakmap.Tak.Subscription.getDefaultInstance()) return this;
      if (other.hasIdentity()) {
        mergeIdentity(other.getIdentity());
      }
      if (!other.getFilter().isEmpty()) {
        filter_ = other.filter_;
        onChanged();
      }
      if (other.hasVersion()) {
        mergeVersion(other.getVersion());
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.atakmap.Tak.Subscription parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.atakmap.Tak.Subscription) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private com.atakmap.Tak.Identity identity_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.atakmap.Tak.Identity, com.atakmap.Tak.Identity.Builder, com.atakmap.Tak.IdentityOrBuilder> identityBuilder_;
    /**
     * <code>optional .com.atakmap.Identity identity = 1;</code>
     */
    public boolean hasIdentity() {
      return identityBuilder_ != null || identity_ != null;
    }
    /**
     * <code>optional .com.atakmap.Identity identity = 1;</code>
     */
    public com.atakmap.Tak.Identity getIdentity() {
      if (identityBuilder_ == null) {
        return identity_ == null ? com.atakmap.Tak.Identity.getDefaultInstance() : identity_;
      } else {
        return identityBuilder_.getMessage();
      }
    }
    /**
     * <code>optional .com.atakmap.Identity identity = 1;</code>
     */
    public Builder setIdentity(com.atakmap.Tak.Identity value) {
      if (identityBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        identity_ = value;
        onChanged();
      } else {
        identityBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>optional .com.atakmap.Identity identity = 1;</code>
     */
    public Builder setIdentity(
        com.atakmap.Tak.Identity.Builder builderForValue) {
      if (identityBuilder_ == null) {
        identity_ = builderForValue.build();
        onChanged();
      } else {
        identityBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>optional .com.atakmap.Identity identity = 1;</code>
     */
    public Builder mergeIdentity(com.atakmap.Tak.Identity value) {
      if (identityBuilder_ == null) {
        if (identity_ != null) {
          identity_ =
            com.atakmap.Tak.Identity.newBuilder(identity_).mergeFrom(value).buildPartial();
        } else {
          identity_ = value;
        }
        onChanged();
      } else {
        identityBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>optional .com.atakmap.Identity identity = 1;</code>
     */
    public Builder clearIdentity() {
      if (identityBuilder_ == null) {
        identity_ = null;
        onChanged();
      } else {
        identity_ = null;
        identityBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>optional .com.atakmap.Identity identity = 1;</code>
     */
    public com.atakmap.Tak.Identity.Builder getIdentityBuilder() {
      
      onChanged();
      return getIdentityFieldBuilder().getBuilder();
    }
    /**
     * <code>optional .com.atakmap.Identity identity = 1;</code>
     */
    public com.atakmap.Tak.IdentityOrBuilder getIdentityOrBuilder() {
      if (identityBuilder_ != null) {
        return identityBuilder_.getMessageOrBuilder();
      } else {
        return identity_ == null ?
            com.atakmap.Tak.Identity.getDefaultInstance() : identity_;
      }
    }
    /**
     * <code>optional .com.atakmap.Identity identity = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.atakmap.Tak.Identity, com.atakmap.Tak.Identity.Builder, com.atakmap.Tak.IdentityOrBuilder> 
        getIdentityFieldBuilder() {
      if (identityBuilder_ == null) {
        identityBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.atakmap.Tak.Identity, com.atakmap.Tak.Identity.Builder, com.atakmap.Tak.IdentityOrBuilder>(
                getIdentity(),
                getParentForChildren(),
                isClean());
        identity_ = null;
      }
      return identityBuilder_;
    }

    private java.lang.Object filter_ = "";
    /**
     * <code>optional string filter = 2;</code>
     */
    public java.lang.String getFilter() {
      java.lang.Object ref = filter_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        filter_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>optional string filter = 2;</code>
     */
    public com.google.protobuf.ByteString
        getFilterBytes() {
      java.lang.Object ref = filter_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        filter_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>optional string filter = 2;</code>
     */
    public Builder setFilter(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      filter_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional string filter = 2;</code>
     */
    public Builder clearFilter() {
      
      filter_ = getDefaultInstance().getFilter();
      onChanged();
      return this;
    }
    /**
     * <code>optional string filter = 2;</code>
     */
    public Builder setFilterBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      filter_ = value;
      onChanged();
      return this;
    }

    private com.atakmap.Tak.TakServerVersion version_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.atakmap.Tak.TakServerVersion, com.atakmap.Tak.TakServerVersion.Builder, com.atakmap.Tak.TakServerVersionOrBuilder> versionBuilder_;
    /**
     * <code>optional .com.atakmap.TakServerVersion version = 3;</code>
     */
    public boolean hasVersion() {
      return versionBuilder_ != null || version_ != null;
    }
    /**
     * <code>optional .com.atakmap.TakServerVersion version = 3;</code>
     */
    public com.atakmap.Tak.TakServerVersion getVersion() {
      if (versionBuilder_ == null) {
        return version_ == null ? com.atakmap.Tak.TakServerVersion.getDefaultInstance() : version_;
      } else {
        return versionBuilder_.getMessage();
      }
    }
    /**
     * <code>optional .com.atakmap.TakServerVersion version = 3;</code>
     */
    public Builder setVersion(com.atakmap.Tak.TakServerVersion value) {
      if (versionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        version_ = value;
        onChanged();
      } else {
        versionBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>optional .com.atakmap.TakServerVersion version = 3;</code>
     */
    public Builder setVersion(
        com.atakmap.Tak.TakServerVersion.Builder builderForValue) {
      if (versionBuilder_ == null) {
        version_ = builderForValue.build();
        onChanged();
      } else {
        versionBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>optional .com.atakmap.TakServerVersion version = 3;</code>
     */
    public Builder mergeVersion(com.atakmap.Tak.TakServerVersion value) {
      if (versionBuilder_ == null) {
        if (version_ != null) {
          version_ =
            com.atakmap.Tak.TakServerVersion.newBuilder(version_).mergeFrom(value).buildPartial();
        } else {
          version_ = value;
        }
        onChanged();
      } else {
        versionBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>optional .com.atakmap.TakServerVersion version = 3;</code>
     */
    public Builder clearVersion() {
      if (versionBuilder_ == null) {
        version_ = null;
        onChanged();
      } else {
        version_ = null;
        versionBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>optional .com.atakmap.TakServerVersion version = 3;</code>
     */
    public com.atakmap.Tak.TakServerVersion.Builder getVersionBuilder() {
      
      onChanged();
      return getVersionFieldBuilder().getBuilder();
    }
    /**
     * <code>optional .com.atakmap.TakServerVersion version = 3;</code>
     */
    public com.atakmap.Tak.TakServerVersionOrBuilder getVersionOrBuilder() {
      if (versionBuilder_ != null) {
        return versionBuilder_.getMessageOrBuilder();
      } else {
        return version_ == null ?
            com.atakmap.Tak.TakServerVersion.getDefaultInstance() : version_;
      }
    }
    /**
     * <code>optional .com.atakmap.TakServerVersion version = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.atakmap.Tak.TakServerVersion, com.atakmap.Tak.TakServerVersion.Builder, com.atakmap.Tak.TakServerVersionOrBuilder> 
        getVersionFieldBuilder() {
      if (versionBuilder_ == null) {
        versionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.atakmap.Tak.TakServerVersion, com.atakmap.Tak.TakServerVersion.Builder, com.atakmap.Tak.TakServerVersionOrBuilder>(
                getVersion(),
                getParentForChildren(),
                isClean());
        version_ = null;
      }
      return versionBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:com.atakmap.Subscription)
  }

  // @@protoc_insertion_point(class_scope:com.atakmap.Subscription)
  private static final com.atakmap.Tak.Subscription DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.atakmap.Tak.Subscription();
  }

  public static com.atakmap.Tak.Subscription getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Subscription>
      PARSER = new com.google.protobuf.AbstractParser<Subscription>() {
    public Subscription parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new Subscription(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Subscription> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Subscription> getParserForType() {
    return PARSER;
  }

  public com.atakmap.Tak.Subscription getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

